"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
const custom_functions_metadata_1 = require("custom-functions-metadata");
const path_1 = __importDefault(require("path"));
const webpack_1 = require("webpack");
/* global require */
const pluginName = "CustomFunctionsMetadataPlugin";
class CustomFunctionsMetadataPlugin {
    constructor(options) {
        this.options = options;
    }
    apply(compiler) {
        let input = Array.isArray(this.options.input)
            ? this.options.input
            : [this.options.input];
        let generateResult;
        input = input.map((file) => path_1.default.resolve(file));
        compiler.hooks.beforeCompile.tapPromise(pluginName, () => __awaiter(this, void 0, void 0, function* () {
            generateResult = yield (0, custom_functions_metadata_1.generateCustomFunctionsMetadata)(input, true);
        }));
        compiler.hooks.compilation.tap(pluginName, (compilation) => {
            if (generateResult.errors.length > 0) {
                generateResult.errors.forEach((err) => compilation.errors.push(new webpack_1.WebpackError(input + " " + err)));
            }
            else {
                compilation.assets[this.options.output] = new webpack_1.sources.RawSource(generateResult.metadataJson);
                CustomFunctionsMetadataPlugin.generateResults[this.options.input] = generateResult;
            }
            // trigger the loader to add code to the functions files
            webpack_1.NormalModule.getCompilationHooks(compilation).beforeLoaders.tap(pluginName, (_, module) => {
                const found = input.find((item) => module.userRequest.endsWith(item));
                if (found) {
                    module.loaders.push({
                        loader: require.resolve("./loader.js"),
                        options: {
                            input: this.options.input,
                            file: found,
                        },
                        ident: null,
                        type: null,
                    });
                }
            });
        });
    }
}
CustomFunctionsMetadataPlugin.generateResults = {};
module.exports = CustomFunctionsMetadataPlugin;
//# sourceMappingURL=customfunctionsplugin.js.map