import ts from "typescript";
export interface ICustomFunctionsMetadata {
    functions: IFunction[];
}
export interface IFunction {
    id: string;
    name: string;
    description?: string;
    helpUrl?: string;
    parameters: IFunctionParameter[];
    result?: IFunctionResult;
    options?: IFunctionOptions;
}
export interface IFunctionOptions {
    cancelable?: boolean;
    requiresAddress?: boolean;
    requiresStreamAddress?: boolean;
    stream?: boolean;
    volatile?: boolean;
    requiresParameterAddresses?: boolean;
    requiresStreamParameterAddresses?: boolean;
    excludeFromAutoComplete?: boolean;
    linkedEntityLoadService?: boolean;
    capturesCallingObject?: boolean;
}
export interface IFunctionParameter {
    name: string;
    description?: string;
    type: string;
    cellValueType?: string;
    dimensionality?: string;
    optional?: boolean;
    repeating?: boolean;
}
export interface IFunctionResult {
    type?: string;
    dimensionality?: string;
}
export interface IEnum {
    id: string;
    type: string;
    values: IEnumValue[];
}
interface IEnumValue {
    name: string;
    value: string | number;
    tooltip: string;
}
export interface IGenerateResult {
    metadataJson: string;
    associate: IAssociate[];
    errors: string[];
}
export interface IFunctionExtras {
    errors: string[];
    javascriptFunctionName: string;
}
export interface IParseTreeResult {
    associate: IAssociate[];
    extras: IFunctionExtras[];
    functions: IFunction[];
    enums: IEnum[];
}
export interface IAssociate {
    sourceFileName: string;
    functionName: string;
    id: string;
}
export interface IExperimentalOptions {
    /** @deprecated */
    allowRepeatingParameters?: boolean;
}
export interface IOptions {
    experimental?: IExperimentalOptions;
}
/**
 * Takes the sourceCode and attempts to parse the functions information
 * @param sourceCode source containing the custom functions
 * @param sourceFileName source code file name or path
 * @param parseTreeOptions options to enable or disable
 */
export declare function parseTree(sourceCode: string, sourceFileName: string): IParseTreeResult;
/**
 * Log containing all the errors found while parsing
 * @param error Error string to add to the log
 */
export declare function logError(error: string, position?: ts.LineAndCharacter | null): string;
export {};
